{"version":3,"sources":["Components/CityInput/index.js","Components/CityWeather/index.js","App.js","reportWebVitals.js","index.js"],"names":["CityInput","city","setCity","fetchCityWeather","React","useState","error","setError","Container","Form","Group","controlId","Label","className","Control","value","type","placeholder","onChange","event","target","Button","variant","onClick","CityWeather","props","render","tem","toFixed","max","min","App","temp","setTemp","setMax","setMin","fetch","then","res","json","result","console","log","main","temp_min","temp_max","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"ySAKe,SAASA,EAAT,GAAuD,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,iBAAmB,EAGzCC,IAAMC,SAAS,IAH0B,mBAG5DC,EAH4D,KAGrDC,EAHqD,KAmBnE,OACE,mCACA,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,eAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,iBAAtB,UACE,cAACF,EAAA,EAAKG,MAAN,CAAYC,UAAU,YAAtB,kBACA,cAACJ,EAAA,EAAKK,QAAN,CACEC,MAAOd,EACPe,KAAK,OACLC,YAAY,aACZC,SAzBgB,SAACC,GACzBjB,EAAQiB,EAAMC,OAAOL,UA0Bf,mBAAGF,UAAU,OAAb,SAAqBP,OAGvB,cAACe,EAAA,EAAD,CAAQC,QAAQ,UAAWC,QA3Bb,WAEdtB,GAKAM,EAAS,IACTJ,KAJAI,EAAS,wBAuBT,2B,MCpCO,SAASiB,EAAYC,GAmClC,OAhCe,SAATC,IACJ,OAAID,EAAMxB,KAEN,cAACO,EAAA,EAAD,UACE,sBAAKK,UAAU,cAAf,UACGY,EAAMxB,KACP,uBACA,sBAAKY,UAAU,OAAf,WACIY,EAAME,IAAM,KAAKC,QAAQ,GAD7B,WAEE,uBACA,0BANJ,MASE,uBACA,sBAAKf,UAAU,OAAf,WACIY,EAAMI,IAAM,KAAKD,QAAQ,GAD7B,WAEE,0BAZJ,MAeE,uBACA,sBAAKf,UAAU,OAAf,WAAwBY,EAAMK,IAAM,KAAKF,QAAQ,GAAjD,mBAOJ,qBAAKf,UAAU,cAAf,SAA8Ba,IAMhCA,GCESK,MArCf,WAAgB,IAAD,EACW3B,IAAMC,SAAS,IAD1B,mBACNJ,EADM,KACAC,EADA,OAEUE,IAAMC,WAFhB,mBAEP2B,EAFO,KAEDC,EAFC,OAGQ7B,IAAMC,WAHd,mBAGPwB,EAHO,KAGFK,EAHE,OAIQ9B,IAAMC,WAJd,mBAIPyB,EAJO,KAIFK,EAJE,OAKyB/B,IAAMC,SAAS,IALxC,mBAuBb,OAvBa,UAwBX,mCACA,sBAAKQ,UAAU,OAAf,UACE,cAACb,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,iBAvBmB,WACvBiC,MAAM,oDAAD,OACiDnC,EADjD,4CAGJoC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLC,QAAQC,IAAI,aAAcF,GAC5BP,EAAQO,EAAOG,KAAKX,MACpBG,EAAOK,EAAOG,KAAKC,UACnBV,EAAOM,EAAOG,KAAKE,gBAgBjB,cAACrB,EAAD,CAAavB,KAAOA,EAAM0B,IAAQK,EAAMH,IAAOA,EAAKC,IAAOA,UCvBlDgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCDdO,IAAS5B,OACP,cAAC,IAAM6B,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.1fa2af11.chunk.js","sourcesContent":["// import { Button } from 'bootstrap'\r\nimport React from \"react\";\r\nimport \"../CityInput/style.css\";\r\nimport { Form, Button, Container } from \"react-bootstrap\";\r\n\r\nexport default function CityInput({city, setCity, fetchCityWeather}) {\r\n    \r\n\r\n  const [error, setError] = React.useState(\"\");\r\n  const handleInputChange = (event) => {\r\n    setCity(event.target.value);\r\n  };\r\n  const handleClick = ()=>{\r\n      //logic to check if input field is empty\r\n    if(!city){\r\n        // alert(\"field is empty\");\r\n        setError(\"city field is empty\");\r\n    }\r\n    else{\r\n        setError(\"\");\r\n        fetchCityWeather();\r\n    }\r\n  }\r\n//   console.log(\"city\", city);\r\n  return (\r\n    <>\r\n    <Container>\r\n      <Form >\r\n        <Form.Group controlId=\"formBasicEmail\">\r\n          <Form.Label className=\"cityLabel\">City</Form.Label>\r\n          <Form.Control\r\n            value={city}\r\n            type=\"text\"\r\n            placeholder=\"Enter City\"\r\n            onChange={handleInputChange}\r\n          />\r\n          <p className=\"text\">{error}</p>\r\n        </Form.Group>\r\n\r\n        <Button variant=\"primary\"  onClick={handleClick}>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport \"../CityWeather/style.css\";\r\nexport default function CityWeather(props) {\r\n  // const[newTemp,setTemp] = React.useState();\r\n  // console.log(props.tem,\"temp\");\r\n  const render = () => {\r\n    if (props.city) {\r\n      return (\r\n        <Container>\r\n          <div className=\"cityWeather\">\r\n            {props.city}\r\n            <br />\r\n            <div className=\"temp\">\r\n              {(props.tem - 271).toFixed(2)} °Cel\r\n              <br />\r\n              <br />\r\n            </div>\r\n            Max\r\n            <br />\r\n            <div className=\"temp\">\r\n              {(props.max - 271).toFixed(2)} °Cel\r\n              <br />\r\n            </div>\r\n            Min\r\n            <br />\r\n            <div className=\"temp\">{(props.min - 271).toFixed(2)} °Cel</div>\r\n          </div>\r\n        </Container>\r\n      );\r\n    }\r\n    return (\r\n      \r\n        <div className=\"cityWeather\">{render}</div>\r\n  \r\n    );\r\n  }\r\n\r\n  return (\r\n      render()\r\n  )\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport CityInput from \"./Components/CityInput\";\nimport CityWeather from \"./Components/CityWeather\";\nfunction App() {\n  const [city, setCity] = React.useState(\"\");\n  const[temp, setTemp] = React.useState();\n  const[max, setMax] = React.useState();\n  const[min, setMin] = React.useState();\n  const [cityWeather, setCityWeather] = React.useState({});\n  const fetchCityWeather = () => {\n    fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=4c496af33d732297c30b641b3b235e47`\n    )\n    .then((res) => res.json())\n    .then((result) => {\n      console.log(\"result is \", result);\n    setTemp(result.main.temp);\n    setMin(result.main.temp_min);\n    setMax(result.main.temp_max);\n   \n      // console.log(temp, \"temp in app\")\n      // setCityWeather(result.main.temp);\n    }); \n      \n  };\n  \n  return (\n    <>\n    <div className=\"main\">\n      <CityInput\n        city={city}\n        setCity={setCity}\n        fetchCityWeather={fetchCityWeather}\n      />\n      <CityWeather city= {city} tem  = {temp} max = {max} min = {min}/>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}